#!/usr/bin/python3
import sys
import os
import yaml

# 获取outdir参数
# 参数 linglong --file linglong.yaml --outdir $dir
outdir = sys.argv[4]
linglongFile = sys.argv[2]

# 读取linglong文件
with open(linglongFile, 'r') as f:
  data = f.read()

# 解析linglong文件并拉取git源码
lconf = yaml.load(data)
if (lconf['source']['kind']=="git"):
    package = lconf['package']['id'] 
    url = lconf['source']['url']
    source = ".linglong-target/" + package + "/source"
    # git clone $url $source
    os.system("git clone " + url + " " + source)

    # tar cvfz $outdir/git_source.tar.zst .linglong-target
    os.system("tar cvfz " + outdir + "/git_source.tar.zst .linglong-target")

#### 准备打包 deb 所需要的文件 ####
package = lconf['package']['id'].lower()
version = lconf['package']['version']
depends = ""

# 转换玲珑依赖为deb依赖
def toDebDepend(depend):
    id = depend['id']
    fields = id.split("/")
    if len(fields) > 1:
        id = fields[0]
        version = fields[1]
    else:
        version = str(depend['version'])
    vs = version.split(".")
    if len(vs) <= 3:
        min = ".".join(vs)
        vs[-1]=str(int(vs[-1])+1)
        max = ".".join(vs)
        return f"linglong.{id} (>= {min}), linglong.{id} (<< {max})"
    return f"linglong.{id} (= {version})"

# 生成 control 文件
deps=[]
if "runtime" in lconf:
    deps.append(toDebDepend(lconf['runtime']))
if "base" in lconf:
    deps.append(toDebDepend(lconf['base']))
if "depends" in lconf:
    for i in range(0, len(lconf['depends'])):
        deps.append(toDebDepend(lconf['depends'][i]))
if len(deps)>0:
    depends = "\nDepends: " + ", ".join(deps)
control=f'''Package: linglong.{package}
Version: {version}
Architecture: amd64
Maintainer: wurongjie <wurongjie@deepin.org>{depends}
Section: linglong
Priority: standard
Description: linglong to deb
'''
with open(outdir + "/control", 'w', encoding='utf-8') as w_f:
    w_f.write(control)

# 生成 postinst 文件
postinst=f'''## Generated by linglong service
repoDir=${{LINGLONG_REPO_DIR:=/var/cache/linglong/repo}}
debDir=${{LINGLONG_DEB_DIR:=/var/cache/linglong/deb}}
mkdir -p $repoDir
ostree init --repo=$repoDir --mode=bare-user-only
ostree --repo=$repoDir commit --branch=linglong/{package}/{version}/x86_64/devel --tree=tar=$debDir/linglong-{package}-{version}-x86_64-devel.tar.zst
ostree --repo=$repoDir commit --branch=linglong/{package}/{version}/x86_64/runtime --tree=tar=$debDir/linglong-{package}-{version}-x86_64-runtime.tar.zst
'''
with open(outdir + "/postinst", 'w', encoding='utf-8') as w_f:
    w_f.write(postinst)

# 生成 postrm 文件
postinst=f'''## Generated by linglong service
repoDir=${{LINGLONG_REPO_DIR:=/var/cache/linglong/repo}}
ostree --repo=$repoDir refs --delete linglong/{package}/{version}/x86_64/devel
ostree --repo=$repoDir refs --delete linglong/{package}/{version}/x86_64/runtime
'''
with open(outdir + "/postrm", 'w', encoding='utf-8') as w_f:
    w_f.write(postinst)

# deb 打包脚本
deb=f'''
#!/bin/bash -e
set -v on
debDir=/var/cache/linglong/deb
mkdir -p DEB/DEBIAN DEB$debDir
cp control postinst postrm DEB/DEBIAN/
chmod +x DEB/DEBIAN/postinst DEB/DEBIAN/postrm
ostree --repo=/home/abuild/.cache/linglong-builder/repo export {package}/{version}/x86_64/devel | zstd -o DEB$debDir/linglong-{package}-{version}-x86_64-devel.tar.zst
ostree --repo=/home/abuild/.cache/linglong-builder/repo export {package}/{version}/x86_64/runtime | zstd -o DEB$debDir/linglong-{package}-{version}-x86_64-runtime.tar.zst
dpkg-deb -b -Znone --root-owner-group ./DEB ../OTHER
'''
with open(outdir + "/deb.bash", 'w', encoding='utf-8') as w_f:
    w_f.write(deb)

